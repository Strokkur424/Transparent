--- a/folia-server/build.gradle.kts
+++ b/folia-server/build.gradle.kts
@@ -1,10 +_,8 @@
 import io.papermc.fill.model.BuildChannel
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
-import io.papermc.paperweight.util.data.FileEntry
-import paper.libs.com.google.gson.annotations.SerializedName
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
 import java.time.Instant
-import kotlin.io.path.readText
 
 plugins {
     `java-library`
@@ -25,7 +_,7 @@
 paperweight {
     minecraftVersion = providers.gradleProperty("mcVersion")
     gitFilePatches = false
-    
+
     val fork = forks.register("folia") {
         upstream.patchDir("paperServer") {
             upstreamPath = "paper-server"
@@ -35,7 +_,22 @@
         }
     }
 
-    activeFork = fork
+    val foliaFork = forks.register("visualized-folia") {
+        forks = fork
+        upstream.patchRepo("paperServer") {
+            upstreamRepo = fork.patchedRepo("paperServer")
+            patchesDir = rootDirectory.dir("visualized-folia-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+        upstream.patchDir("foliaServer") {
+            upstreamPath = "folia-server"
+            excludes = setOf("src/minecraft", "paper-patches", "minecraft-patches", "build.gradle.kts", "build.gradle.kts.patch")
+            patchesDir = rootDirectory.dir("visualized-folia-server/folia-patches")
+            outputDir = rootDirectory.dir("folia-server")
+        }
+    }
+
+    activeFork = foliaFork;
 
 
     spigot {
@@ -71,6 +_,7 @@
     @get:Inject
     abstract val archiveOperations: ArchiveOperations
 }
+
 val services = objects.newInstance<Services>()
 
 if (project.providers.gradleProperty("publishDevBundle").isPresent) {
@@ -123,10 +_,14 @@
     main {
         java { srcDir("../paper-server/src/main/java"); srcDir("../paper-server/src/generated/java") }
         resources { srcDir("../paper-server/src/main/resources") }
+        java { srcDir("../folia-server/src/main/java") }
+        resources { srcDir("../folia-server/src/main/resources") }
     }
     test {
         java { srcDir("../paper-server/src/test/java") }
         resources { srcDir("../paper-server/src/test/resources") }
+        java { srcDir("../folia-server/src/test/java") }
+        resources { srcDir("../folia-server/src/test/resources") }
     }
 }
 val log4jPlugins = sourceSets.create("log4jPlugins") {
@@ -143,6 +_,7 @@
 
 // Configure mockito agent that is needed in newer java versions
 val mockitoAgent = configurations.register("mockitoAgent")
+
 abstract class MockitoAgentProvider : CommandLineArgumentProvider {
     @get:CompileClasspath
     abstract val fileCollection: ConfigurableFileCollection
@@ -153,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":folia-api"))
+    implementation(project(":visualized-folia-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -274,7 +_,8 @@
         it.map { f ->
             if (f.asFile.isFile) {
                 archiveOperations.zipTree(f.asFile)
-            } else {
+            }
+            else {
                 f.asFile
             }
         }
