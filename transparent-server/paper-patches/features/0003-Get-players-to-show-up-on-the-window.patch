From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Strokkur424 <strokkur.24@gmail.com>
Date: Tue, 8 Jul 2025 19:11:23 +0200
Subject: [PATCH] Get players to show up on the window


diff --git a/src/main/java/net/strokkur/transparent/ui/LiveRegionsPlayerData.java b/src/main/java/net/strokkur/transparent/ui/LiveRegionsPlayerData.java
new file mode 100644
index 0000000000000000000000000000000000000000..713c2f0ea20ef6c83fa5cfcb8e8929831fe654f7
--- /dev/null
+++ b/src/main/java/net/strokkur/transparent/ui/LiveRegionsPlayerData.java
@@ -0,0 +1,23 @@
+package net.strokkur.transparent.ui;
+
+import net.minecraft.core.Vec3i;
+import org.bukkit.entity.Player;
+
+import java.awt.image.BufferedImage;
+
+@SuppressWarnings("SuspiciousNameCombination")
+public record LiveRegionsPlayerData(
+    Player player,
+    Vec3i position,
+    BufferedImage skullTexture,
+    int originX,
+    int originY
+) {
+    public static final int WIDTH = 100;
+    public static final int HEIGHT = WIDTH;
+
+    public boolean isInBounds(int x, int y) {
+        return (originX < x && (originX + WIDTH) > x)
+               && (originY < y && (originY + HEIGHT) > y);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewer.java b/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewer.java
index 2eac8babd398bf3eec308e114c74cb27cd24bdf4..c48d08d65872827fc924a35c892f43fb15f5d465 100644
--- a/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewer.java
+++ b/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewer.java
@@ -1,7 +1,10 @@
 package net.strokkur.transparent.ui;
 
 import com.mojang.logging.LogUtils;
+import net.minecraft.core.Vec3i;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ColumnPos;
+import net.strokkur.transparent.util.HeadCache;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.slf4j.Logger;
@@ -9,8 +12,15 @@ import org.slf4j.Logger;
 import javax.swing.JFrame;
 import java.awt.GraphicsEnvironment;
 import java.awt.HeadlessException;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 public class LiveRegionsViewer {
 
@@ -21,6 +31,19 @@ public class LiveRegionsViewer {
 
     private boolean isClosed = false;
 
+    private int mouseX = Integer.MIN_VALUE;
+    private int mouseY = Integer.MIN_VALUE;
+
+    /**
+     * The number of blocks represented by one pixel.
+     */
+    private double scale = 1d;
+
+    private int originX = 0;
+    private int originZ = 0;
+
+    private List<LiveRegionsPlayerData> playerData = Collections.synchronizedList(new ArrayList<>(200));
+
     public LiveRegionsViewer() throws HeadlessException {
         if (GraphicsEnvironment.isHeadless()) {
             HeadlessException exception = new HeadlessException("Your environment does not support creating windows frames.");
@@ -40,6 +63,8 @@ public class LiveRegionsViewer {
         this.frame.setResizable(true);
         this.frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
 
+        registerListeners();
+
         this.panel = new LiveRegionsViewerPanel(this);
         this.frame.add(this.panel);
         this.frame.pack();
@@ -55,6 +80,111 @@ public class LiveRegionsViewer {
         this.frame.setVisible(true);
     }
 
+    public void registerListeners() {
+        frame.addKeyListener(new KeyAdapter() {
+            @Override
+            public void keyPressed(KeyEvent e) {
+                switch (e.getKeyCode()) {
+                    case 107 -> scale = Math.max(0.1d, scale - 0.1d);
+                    case 109 -> scale = Math.min(100d, scale + 0.1d);
+                }
+                redraw();
+            }
+        });
+
+        frame.addMouseWheelListener(e -> {
+            scale = Math.clamp(scale + (e.getPreciseWheelRotation() / 10d), 0.1f, 100d);
+            redraw();
+        });
+
+        MouseAdapter mouseListener = new MouseAdapter() {
+            @Override
+            public void mouseExited(MouseEvent e) {
+                mouseX = Integer.MIN_VALUE;
+                mouseY = Integer.MIN_VALUE;
+                redraw();
+            }
+
+            @Override
+            public void mouseDragged(MouseEvent e) {
+                if (!isMouseOnScreen()) {
+                    return;
+                }
+
+                int diffX = e.getX() - mouseX;
+                int diffY = e.getY() - mouseY;
+
+                originX -= (int) (diffX * scale);
+                originZ -= (int) (diffY * scale);
+
+                mouseX = e.getX();
+                mouseY = e.getY();
+                redraw();
+            }
+
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                mouseX = e.getX();
+                mouseY = e.getY();
+                redraw();
+            }
+
+            @Override
+            public void mouseMoved(MouseEvent e) {
+                mouseX = e.getX();
+                mouseY = e.getY();
+                redraw();
+            }
+        };
+
+        frame.addMouseListener(mouseListener);
+        frame.addMouseMotionListener(mouseListener);
+    }
+
+    public int getMouseX() {
+        return mouseX;
+    }
+
+    public int getMouseY() {
+        return mouseY;
+    }
+
+    public double getScale() {
+        return scale;
+    }
+
+    public int getOriginX() {
+        return originX;
+    }
+
+    public int getOriginZ() {
+        return originZ;
+    }
+
+    public void updatePlayerData() {
+        playerData.clear();
+        for (Player player : Bukkit.getOnlinePlayers()) {
+            Vec3i pos = new Vec3i((int) player.getX(), (int) player.getY(), (int) player.getZ());
+            ColumnPos column = toPixels(pos.getX(), pos.getZ());
+
+            playerData.add(new LiveRegionsPlayerData(player, pos, HeadCache.headCache().getSkullFor(player), column.x(), column.z()));
+        }
+    }
+    
+    protected ColumnPos toPixels(int xPos, int zPos) {
+        int x = (int) ((xPos - originX) / scale) + (this.panel.getWidth() / 2);
+        int z = (int) ((zPos - originZ) / scale) + (this.panel.getHeight() / 2);
+        return new ColumnPos(x, z);
+    }
+
+    public List<LiveRegionsPlayerData> getPlayerData() {
+        return Collections.unmodifiableList(playerData);
+    }
+
+    public boolean isMouseOnScreen() {
+        return mouseX != Integer.MIN_VALUE && mouseY != Integer.MIN_VALUE;
+    }
+
     public void redraw() {
         this.frame.repaint();
     }
diff --git a/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewerPanel.java b/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewerPanel.java
index 1785b9eb96aa9d18fcb68bb0a1beb95ef4c838e5..9d631981f6ab0bc1e073eee912f9b4105db39a62 100644
--- a/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewerPanel.java
+++ b/src/main/java/net/strokkur/transparent/ui/LiveRegionsViewerPanel.java
@@ -6,42 +6,20 @@ import org.slf4j.Logger;
 import javax.swing.JPanel;
 import java.awt.Color;
 import java.awt.Dimension;
+import java.awt.FontMetrics;
 import java.awt.Graphics;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
+import java.util.List;
 
 public class LiveRegionsViewerPanel extends JPanel {
 
     private static final Logger LOGGER = LogUtils.getLogger();
 
-    private int mouseX = Integer.MIN_VALUE;
-    private int mouseY = Integer.MIN_VALUE;
+    private final LiveRegionsViewer viewer;
 
     public LiveRegionsViewerPanel(LiveRegionsViewer viewer) {
         super();
-
-        addMouseMotionListener(new MouseAdapter() {
-            @Override
-            public void mouseExited(MouseEvent e) {
-                mouseX = Integer.MIN_VALUE;
-                mouseY = Integer.MIN_VALUE;
-                viewer.redraw();
-            }
-
-            @Override
-            public void mouseEntered(MouseEvent e) {
-                mouseX = e.getX();
-                mouseY = e.getY();
-                viewer.redraw();
-            }
-
-            @Override
-            public void mouseMoved(MouseEvent e) {
-                mouseX = e.getX();
-                mouseY = e.getY();
-                viewer.redraw();
-            }
-        });
+        setBackground(Color.DARK_GRAY);
+        this.viewer = viewer;
     }
 
     @Override
@@ -49,17 +27,63 @@ public class LiveRegionsViewerPanel extends JPanel {
         return new Dimension(1280, 720);
     }
 
-    private boolean isMouseOnScreen() {
-        return mouseX != Integer.MIN_VALUE && mouseY != Integer.MIN_VALUE;
-    }
-
     @Override
     protected void paintComponent(Graphics g) {
         super.paintComponent(g);
 
-        if (isMouseOnScreen()) {
-            g.setColor(Color.GREEN);
-            g.drawString("This is text", mouseX, mouseY);
+        viewer.updatePlayerData();
+        viewer.getPlayerData().forEach(data -> {
+            int scale = Math.clamp((int) (32 * viewer.getScale()), 16, 64);
+            g.drawImage(data.skullTexture(), data.originX(), data.originY(), scale, scale, null);
+        });
+
+        //noinspection ConstantValue
+        if (true) {
+            record StringHeightWidth(String text, int width) {}
+
+            List<String> debugStrings = List.of(
+                "mouseX: %s.".formatted(viewer.isMouseOnScreen() ? viewer.getMouseX() : "out of screen"),
+                "mouseY: %s.".formatted(viewer.isMouseOnScreen() ? viewer.getMouseY() : "out of screen"),
+                "scale: %s.".formatted(viewer.getScale()),
+                "originX: %s.".formatted(viewer.getOriginX()),
+                "originZ: %s.".formatted(viewer.getOriginZ())
+            );
+
+            FontMetrics metrics = g.getFontMetrics();
+            List<StringHeightWidth> lines = debugStrings.stream()
+                .map(str -> new StringHeightWidth(str, metrics.stringWidth(str)))
+                .toList();
+
+            int rectWidth = 0;
+            int rectHeight = 0;
+
+            for (StringHeightWidth line : lines) {
+                if (line.width() > rectWidth) {
+                    rectWidth = line.width();
+                }
+                rectHeight += metrics.getHeight();
+            }
+
+            drawTransparentRect(g, Color.BLACK, 10, 10, rectWidth + 10, rectHeight + 10);
+
+            g.setColor(Color.WHITE);
+            for (int i = 0; i < lines.size(); i++) {
+                StringHeightWidth line = lines.get(i);
+                g.drawString(line.text(), 15, 10 + metrics.getHeight() * (i + 1));
+            }
+        }
+
+        if (viewer.isMouseOnScreen()) {
+            // ...
         }
     }
+
+    private void drawTransparentRect(Graphics g, Color color, int x, int y, int width, int height) {
+        Color transparent = new Color(color.getRed(), color.getGreen(), color.getBlue(), 80);
+        g.setColor(transparent);
+        g.fillRect(x, y, width, height);
+
+        g.setColor(color);
+        g.drawRect(x, y, width, height);
+    }
 }
diff --git a/src/main/java/net/strokkur/transparent/util/HeadCache.java b/src/main/java/net/strokkur/transparent/util/HeadCache.java
new file mode 100644
index 0000000000000000000000000000000000000000..b0f72cde9422ae040642ff56e3a2ff1392f75963
--- /dev/null
+++ b/src/main/java/net/strokkur/transparent/util/HeadCache.java
@@ -0,0 +1,61 @@
+package net.strokkur.transparent.util;
+
+import org.bukkit.entity.Player;
+import org.jspecify.annotations.NullMarked;
+import org.jspecify.annotations.Nullable;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+@NullMarked
+public class HeadCache {
+
+    @Nullable
+    private static HeadCache INSTANCE = null;
+
+    private final Map<UUID, BufferedImage> cache;
+
+    public static HeadCache headCache() {
+        if (INSTANCE == null) {
+            INSTANCE = new HeadCache();
+        }
+        return INSTANCE;
+    }
+
+    public HeadCache() {
+        cache = new HashMap<>(400);
+    }
+
+    public BufferedImage getSkullFor(UUID uuid) {
+        BufferedImage img = cache.get(uuid);
+        if (img == null) {
+            try (HttpClient client = HttpClient.newHttpClient()) {
+                byte[] image = client.send(
+                    HttpRequest.newBuilder(new URI("https://mc-heads.net/avatar/%s/128".formatted(uuid))).build(),
+                    HttpResponse.BodyHandlers.ofByteArray()
+                ).body();
+
+                img = ImageIO.read(new ByteArrayInputStream(image));
+                cache.put(uuid, img);
+            } catch (IOException | InterruptedException | URISyntaxException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        return img;
+    }
+    
+    public BufferedImage getSkullFor(Player player) {
+        return getSkullFor(player.getUniqueId());
+    }
+}
